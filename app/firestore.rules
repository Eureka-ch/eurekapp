rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User
    match /users/{userId} {
      allow get: if request.auth != null && request.auth.uid == resource.id;
      allow list: if request.auth != null && request.auth.uid == resource.id;
      allow create: if request.auth != null && request.auth.uid == request.resource.id && 
               request.resource.data.keys().hasAll(['displayName', 'email', 'uid']) && 
               request.resource.data.displayName.size() >= 1 && request.resource.data.displayName.size() <= 100;
      allow update: if request.auth != null && request.auth.uid == resource.id && 
               request.resource.data.keys().hasAll(['displayName', 'email', 'uid']) && 
               request.resource.data.displayName.size() >= 1 && request.resource.data.displayName.size() <= 100 && 
               request.resource.data.uid == resource.data.uid;
    }

    // Workspace
    match /workspaces/{workspaceId} {
      allow get: if request.auth != null && request.auth.uid in resource.data.members.keys();
      allow list: if request.auth != null && request.auth.uid in resource.data.members.keys();
      allow create: if request.auth != null && request.auth.uid in request.resource.data.members.keys() && 
               request.resource.data.keys().hasAll(['isPersonal', 'members', 'name', 'workspaceId']) && 
               request.resource.data.name.size() >= 1 && request.resource.data.name.size() <= 100;
      allow update: if request.auth != null && request.auth.uid in resource.data.members.keys() && 
               request.resource.data.keys().hasAll(['isPersonal', 'members', 'name', 'workspaceId']) && 
               request.resource.data.name.size() >= 1 && request.resource.data.name.size() <= 100 && 
               request.resource.data.workspaceId == resource.data.workspaceId;
      allow delete: if request.auth != null && request.auth.uid in resource.data.members.keys() && resource.data.members[request.auth.uid] == 'owner';
    }

    // Group
    match /workspaces/{workspaceId}/groups/{groupId} {
      allow get: if request.auth != null && request.auth.uid in resource.data.members.keys();
      allow list: if request.auth != null && request.auth.uid in resource.data.members.keys();
      allow create: if request.auth != null && request.auth.uid in request.resource.data.members.keys() && 
               request.resource.data.keys().hasAll(['groupID', 'members', 'name', 'workspaceId']) && 
               request.resource.data.name.size() >= 1 && request.resource.data.name.size() <= 100;
      allow update: if request.auth != null && request.auth.uid in resource.data.members.keys() && 
               request.resource.data.keys().hasAll(['groupID', 'members', 'name', 'workspaceId']) && 
               request.resource.data.groupID == resource.data.groupID && 
               request.resource.data.name.size() >= 1 && request.resource.data.name.size() <= 100 && 
               request.resource.data.workspaceId == resource.data.workspaceId;
      allow delete: if request.auth != null && request.auth.uid in resource.data.members.keys() && resource.data.members[request.auth.uid] == 'admin';
    }

    // Project
    match /workspaces/{workspaceId}/groups/{groupId}/projects/{projectId} {
      allow get: if request.auth != null;
      allow list: if request.auth != null;
      allow create: if request.auth != null && 
               request.resource.data.keys().hasAll(['groupId', 'name', 'projectId', 'status', 'workspaceId']) && 
               (!request.resource.data.keys().hasAny(['description']) || (request.resource.data.description.size() <= 1000)) && 
               request.resource.data.name.size() >= 1 && request.resource.data.name.size() <= 100;
      allow update: if request.auth != null && 
               request.resource.data.keys().hasAll(['groupId', 'name', 'projectId', 'status', 'workspaceId']) && 
               (!request.resource.data.keys().hasAny(['description']) || (request.resource.data.description.size() <= 1000)) && 
               request.resource.data.groupId == resource.data.groupId && 
               request.resource.data.name.size() >= 1 && request.resource.data.name.size() <= 100 && 
               request.resource.data.projectId == resource.data.projectId && 
               request.resource.data.workspaceId == resource.data.workspaceId;
      allow delete: if request.auth != null;
    }

    // TaskTemplate
    match /workspaces/{workspaceId}/taskTemplates/{taskTemplateId} {
      allow get: if request.auth != null;
      allow list: if request.auth != null;
      allow create: if request.auth != null && 
               request.resource.data.keys().hasAll(['contextId', 'contextType', 'templateID', 'title', 'workspaceId']) && 
               (!request.resource.data.keys().hasAny(['description']) || (request.resource.data.description.size() <= 1000)) && 
               request.resource.data.title.size() >= 1 && request.resource.data.title.size() <= 100;
      allow update: if request.auth != null && 
               request.resource.data.keys().hasAll(['contextId', 'contextType', 'templateID', 'title', 'workspaceId']) && 
               request.resource.data.contextId == resource.data.contextId && 
               request.resource.data.contextType == resource.data.contextType && 
               (!request.resource.data.keys().hasAny(['description']) || (request.resource.data.description.size() <= 1000)) && 
               request.resource.data.templateID == resource.data.templateID && 
               request.resource.data.title.size() >= 1 && request.resource.data.title.size() <= 100 && 
               request.resource.data.workspaceId == resource.data.workspaceId;
      allow delete: if request.auth != null;
    }

    // Task
    match /workspaces/{workspaceId}/groups/{groupId}/projects/{projectId}/tasks/{taskId} {
      allow get: if request.auth != null;
      allow list: if request.auth != null;
      allow create: if request.auth != null && 
               request.resource.data.keys().hasAll(['assignedUserIds', 'groupId', 'projectId', 'taskID', 'templateId', 'workspaceId']);
      allow update: if request.auth != null && 
               request.resource.data.keys().hasAll(['assignedUserIds', 'groupId', 'projectId', 'taskID', 'templateId', 'workspaceId']) && 
               request.resource.data.groupId == resource.data.groupId && 
               request.resource.data.projectId == resource.data.projectId && 
               request.resource.data.taskID == resource.data.taskID && 
               request.resource.data.templateId == resource.data.templateId && 
               request.resource.data.workspaceId == resource.data.workspaceId;
      allow delete: if request.auth != null;
    }

    // Meeting
    match /workspaces/{workspaceId}/meetings/{meetingId} {
      allow get: if request.auth != null && request.auth.uid in resource.data.participants.keys();
      allow list: if request.auth != null && request.auth.uid in resource.data.participants.keys();
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants.keys() && 
               request.resource.data.keys().hasAll(['contextId', 'contextType', 'meetingID', 'participants', 'status', 'title', 'workspaceId']) && 
               request.resource.data.title.size() >= 1 && request.resource.data.title.size() <= 200;
      allow update: if request.auth != null && request.auth.uid in resource.data.participants.keys() && 
               request.resource.data.keys().hasAll(['contextId', 'contextType', 'meetingID', 'participants', 'status', 'title', 'workspaceId']) && 
               request.resource.data.contextId == resource.data.contextId && 
               request.resource.data.contextType == resource.data.contextType && 
               request.resource.data.meetingID == resource.data.meetingID && 
               request.resource.data.title.size() >= 1 && request.resource.data.title.size() <= 200 && 
               request.resource.data.workspaceId == resource.data.workspaceId;
      allow delete: if request.auth != null && resource.data.participants[request.auth.uid] == 'host';
    }

    // ChatChannel
    match /workspaces/{workspaceId}/chatChannels/{chatChannelId} {
      allow get: if request.auth != null;
      allow list: if request.auth != null;
      allow create: if request.auth != null && 
               request.resource.data.keys().hasAll(['channelID', 'contextId', 'contextType', 'name', 'workspaceId']) && 
               request.resource.data.name.size() >= 1 && request.resource.data.name.size() <= 100;
      allow update: if request.auth != null && 
               request.resource.data.keys().hasAll(['channelID', 'contextId', 'contextType', 'name', 'workspaceId']) && 
               request.resource.data.channelID == resource.data.channelID && 
               request.resource.data.contextId == resource.data.contextId && 
               request.resource.data.contextType == resource.data.contextType && 
               request.resource.data.name.size() >= 1 && request.resource.data.name.size() <= 100 && 
               request.resource.data.workspaceId == resource.data.workspaceId;
      allow delete: if request.auth != null;
    }

    // Message
    match /chatChannels/{channelId}/messages/{messageId} {
      allow get: if request.auth != null;
      allow list: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.senderId && 
               request.resource.data.keys().hasAll(['createdAt', 'messageID', 'senderId', 'text']) && 
               request.resource.data.text.size() >= 1 && request.resource.data.text.size() <= 5000;
      allow update: if request.auth != null && request.auth.uid == resource.data.senderId && 
               request.resource.data.keys().hasAll(['createdAt', 'messageID', 'senderId', 'text']) && 
               request.resource.data.messageID == resource.data.messageID && 
               request.resource.data.senderId == resource.data.senderId && 
               request.resource.data.text.size() >= 1 && request.resource.data.text.size() <= 5000;
      allow delete: if request.auth != null && request.auth.uid == resource.data.senderId;
    }

  }
}
