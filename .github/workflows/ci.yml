name: CI - Test Runner

# Run the workflow when commits are pushed on main or when a PR is modified
on:
  push:
    branches:
      - main

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      android: ${{ steps.filter.outputs.android }}
      functions: ${{ steps.filter.outputs.functions }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            android:
              - 'app/**'
              - 'gradle/**'
              - '**.gradle'
              - '**.gradle.kts'
              - '**.kt'
              - '**.xml'
              - '.github/workflows/ci.yml'
            functions:
              - 'functions/**'
              - 'firebase.json'

  ktfmt-check:
    name: KTFmt Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.android == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: KTFmt Check
        run: ./gradlew ktfmtCheck

  lint-check:
    name: Lint Check
    runs-on: ubuntu-latest
    needs: [changes, build]
    if: needs.changes.outputs.android == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Decode secrets
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
          FIRESTORE_RULES: ${{ secrets.FIRESTORE_RULES }}
          STORAGE_RULES: ${{ secrets.STORAGE_RULES }}
          GOOGLE_CLOUD_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}

        run: |
          if [ -n "$GOOGLE_SERVICES" ]; then
            echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json
          else
            echo "::warning::GOOGLE_SERVICES secret is not set. google-services.json will not be created. Should be present after B2"
          fi
          if [ -n "$FIRESTORE_RULES" ]; then
            mkdir -p ./firebase/firestore
            echo "$FIRESTORE_RULES" | base64 --decode > ./firebase/firestore/firestore.rules
          fi
          if [ -n "$STORAGE_RULES" ]; then
            mkdir -p ./firebase/storage
            echo "$STORAGE_RULES" | base64 --decode > ./firebase/storage/storage.rules
          fi
          if [ -n "$GOOGLE_CLOUD_CREDENTIALS" ]; then
            mkdir -p ./functions
            echo "$GOOGLE_CLOUD_CREDENTIALS" | base64 --decode > ./functions/eureka-stt-service-account.json
          else
            echo "::warning::GOOGLE_CLOUD_CREDENTIALS secret is not set. Speech-to-Text transcription tests will fail."
          fi

          if [ -n "$LOCAL_PROPERTIES" ]; then
            echo "$LOCAL_PROPERTIES" | base64 --decode > ./local.properties
          else
            echo "::warning::LOCAL_PROPERTIES secret is not set. local.properties will not be created. Should be present after B3"
          fi

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Lint Check
        run: ./gradlew lint --parallel --build-cache

  build:
    name: Build APKs
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.android == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Decode secrets
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
          FIRESTORE_RULES: ${{ secrets.FIRESTORE_RULES }}
          STORAGE_RULES: ${{ secrets.STORAGE_RULES }}
          GOOGLE_CLOUD_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}

        run: |
          if [ -n "$GOOGLE_SERVICES" ]; then
            echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json
          else
            echo "::warning::GOOGLE_SERVICES secret is not set. google-services.json will not be created. Should be present after B2"
          fi
          if [ -n "$FIRESTORE_RULES" ]; then
            mkdir -p ./firebase/firestore
            echo "$FIRESTORE_RULES" | base64 --decode > ./firebase/firestore/firestore.rules
          fi
          if [ -n "$STORAGE_RULES" ]; then
            mkdir -p ./firebase/storage
            echo "$STORAGE_RULES" | base64 --decode > ./firebase/storage/storage.rules
          fi
          if [ -n "$GOOGLE_CLOUD_CREDENTIALS" ]; then
            mkdir -p ./functions
            echo "$GOOGLE_CLOUD_CREDENTIALS" | base64 --decode > ./functions/eureka-stt-service-account.json
          else
            echo "::warning::GOOGLE_CLOUD_CREDENTIALS secret is not set. Speech-to-Text transcription tests will fail."
          fi

          if [ -n "$LOCAL_PROPERTIES" ]; then
            echo "$LOCAL_PROPERTIES" | base64 --decode > ./local.properties
          else
            echo "::warning::LOCAL_PROPERTIES secret is not set. local.properties will not be created. Should be present after B3"
          fi

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build APKs
        run: ./gradlew assembleDebug assembleDebugAndroidTest --parallel --build-cache

      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: apks
          path: |
            app/build/outputs/apk/**/*.apk
          retention-days: 1

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [changes, build]
    if: needs.changes.outputs.android == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Decode secrets
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
          FIRESTORE_RULES: ${{ secrets.FIRESTORE_RULES }}
          STORAGE_RULES: ${{ secrets.STORAGE_RULES }}
          GOOGLE_CLOUD_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}

        run: |
          if [ -n "$GOOGLE_SERVICES" ]; then
            echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json
          else
            echo "::warning::GOOGLE_SERVICES secret is not set. google-services.json will not be created. Should be present after B2"
          fi
          if [ -n "$FIRESTORE_RULES" ]; then
            mkdir -p ./firebase/firestore
            echo "$FIRESTORE_RULES" | base64 --decode > ./firebase/firestore/firestore.rules
          fi
          if [ -n "$STORAGE_RULES" ]; then
            mkdir -p ./firebase/storage
            echo "$STORAGE_RULES" | base64 --decode > ./firebase/storage/storage.rules
          fi
          if [ -n "$GOOGLE_CLOUD_CREDENTIALS" ]; then
            mkdir -p ./functions
            echo "$GOOGLE_CLOUD_CREDENTIALS" | base64 --decode > ./functions/eureka-stt-service-account.json
          else
            echo "::warning::GOOGLE_CLOUD_CREDENTIALS secret is not set. Speech-to-Text transcription tests will fail."
          fi

          if [ -n "$LOCAL_PROPERTIES" ]; then
            echo "$LOCAL_PROPERTIES" | base64 --decode > ./local.properties
          else
            echo "::warning::LOCAL_PROPERTIES secret is not set. local.properties will not be created. Should be present after B3"
          fi

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Run unit tests
        run: ./gradlew test -x lint --parallel --build-cache

      - name: Upload test results and coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: |
            app/build/test-results/**/*.xml
            app/build/jacoco/**/*.exec
          compression-level: 9

  instrumented-tests:
    name: Instrumented Tests (Shard ${{ matrix.shard }}/4)
    runs-on: ubuntu-latest
    needs: [changes, build]
    if: needs.changes.outputs.android == 'true' || needs.changes.outputs.functions == 'true'
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Download APKs
        uses: actions/download-artifact@v4
        with:
          name: apks
          path: app/build/outputs/apk

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-36-pixel7pro

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 36
          target: google_apis
          arch: x86_64
          profile: pixel_7_pro
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back emulated -camera-front emulated -memory 4096 -cores 4
          disable-animations: true
          script: echo "Generated AVD snapshot for caching."

      - name: Decode secrets
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
          FIRESTORE_RULES: ${{ secrets.FIRESTORE_RULES }}
          STORAGE_RULES: ${{ secrets.STORAGE_RULES }}
          GOOGLE_CLOUD_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}

        run: |
          if [ -n "$GOOGLE_SERVICES" ]; then
            echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json
          else
            echo "::warning::GOOGLE_SERVICES secret is not set. google-services.json will not be created. Should be present after B2"
          fi
          if [ -n "$FIRESTORE_RULES" ]; then
            mkdir -p ./firebase/firestore
            echo "$FIRESTORE_RULES" | base64 --decode > ./firebase/firestore/firestore.rules
          fi
          if [ -n "$STORAGE_RULES" ]; then
            mkdir -p ./firebase/storage
            echo "$STORAGE_RULES" | base64 --decode > ./firebase/storage/storage.rules
          fi
          if [ -n "$GOOGLE_CLOUD_CREDENTIALS" ]; then
            mkdir -p ./functions
            echo "$GOOGLE_CLOUD_CREDENTIALS" | base64 --decode > ./functions/eureka-stt-service-account.json
          else
            echo "::warning::GOOGLE_CLOUD_CREDENTIALS secret is not set. Speech-to-Text transcription tests will fail."
          fi

          if [ -n "$LOCAL_PROPERTIES" ]; then
            echo "$LOCAL_PROPERTIES" | base64 --decode > ./local.properties
          else
            echo "::warning::LOCAL_PROPERTIES secret is not set. local.properties will not be created. Should be present after B3"
          fi

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Cache Firebase CLI
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-firebase-cli-v1
          restore-keys: |
            ${{ runner.os }}-firebase-cli-

      - name: Cache Firebase Emulators
        uses: actions/cache@v4
        with:
          path: ~/.cache/firebase/emulators
          key: ${{ runner.os }}-firebase-emulators-v1
          restore-keys: |
            ${{ runner.os }}-firebase-emulators-

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Cache Cloud Functions dependencies
        uses: actions/cache@v4
        with:
          path: functions/node_modules
          key: ${{ runner.os }}-functions-${{ hashFiles('functions/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-functions-

      - name: Build Cloud Functions
        run: |
          cd functions
          npm install
          npm run build
          cd ..

      - name: Start Firebase emulators
        run: |
          if [ -e "firebase.json" ] && jq -e '.emulators' firebase.json >/dev/null; then
            echo "Starting Firebase emulators for instrumentation tests..."
            firebase emulators:start --only storage,firestore,auth,functions --project eureka-app-ch &
            sleep 20
            echo "Firebase emulators started"
          else
            echo "Firebase emulators not configured, skipping emulator startup..."
          fi

      - name: run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 36
          target: google_apis
          arch: x86_64
          profile: pixel_7_pro
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back emulated -camera-front emulated -memory 4096 -cores 4
          disable-animations: true
          script: ./gradlew connectedCheck -x lint --parallel --build-cache -Pandroid.testInstrumentationRunnerArguments.numShards=4 -Pandroid.testInstrumentationRunnerArguments.shardIndex=$((${{ matrix.shard }} - 1))

      - name: Upload instrumented test results and coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: instrumented-test-results-shard-${{ matrix.shard }}
          path: |
            app/build/outputs/androidTest-results/**/*.xml
            app/build/outputs/code_coverage/**/*
          compression-level: 9

  reports:
    name: Coverage & SonarCloud
    runs-on: ubuntu-latest
    needs: [ktfmt-check, lint-check, build, unit-tests, instrumented-tests]
    if: success()

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Decode secrets
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
          FIRESTORE_RULES: ${{ secrets.FIRESTORE_RULES }}
          STORAGE_RULES: ${{ secrets.STORAGE_RULES }}
          GOOGLE_CLOUD_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}

        run: |
          if [ -n "$GOOGLE_SERVICES" ]; then
            echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json
          else
            echo "::warning::GOOGLE_SERVICES secret is not set. google-services.json will not be created. Should be present after B2"
          fi
          if [ -n "$FIRESTORE_RULES" ]; then
            mkdir -p ./firebase/firestore
            echo "$FIRESTORE_RULES" | base64 --decode > ./firebase/firestore/firestore.rules
          fi
          if [ -n "$STORAGE_RULES" ]; then
            mkdir -p ./firebase/storage
            echo "$STORAGE_RULES" | base64 --decode > ./firebase/storage/storage.rules
          fi
          if [ -n "$GOOGLE_CLOUD_CREDENTIALS" ]; then
            mkdir -p ./functions
            echo "$GOOGLE_CLOUD_CREDENTIALS" | base64 --decode > ./functions/eureka-stt-service-account.json
          else
            echo "::warning::GOOGLE_CLOUD_CREDENTIALS secret is not set. Speech-to-Text transcription tests will fail."
          fi

          if [ -n "$LOCAL_PROPERTIES" ]; then
            echo "$LOCAL_PROPERTIES" | base64 --decode > ./local.properties
          else
            echo "::warning::LOCAL_PROPERTIES secret is not set. local.properties will not be created. Should be present after B3"
          fi

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Download unit test results
        uses: actions/download-artifact@v4
        with:
          name: unit-test-results
          path: app/build/test-results/

      - name: Download instrumented test results (Shard 1)
        uses: actions/download-artifact@v4
        with:
          name: instrumented-test-results-shard-1
          path: app/build/outputs/androidTest-results/

      - name: Download instrumented test results (Shard 2)
        uses: actions/download-artifact@v4
        with:
          name: instrumented-test-results-shard-2
          path: app/build/outputs/androidTest-results/

      - name: Download instrumented test results (Shard 3)
        uses: actions/download-artifact@v4
        with:
          name: instrumented-test-results-shard-3
          path: app/build/outputs/androidTest-results/

      - name: Download instrumented test results (Shard 4)
        uses: actions/download-artifact@v4
        with:
          name: instrumented-test-results-shard-4
          path: app/build/outputs/androidTest-results/

      - name: Generate Coverage Report
        run: ./gradlew jacocoTestReport

      - name: Upload report to SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar --parallel --build-cache
